1、two_sum
   hashmap
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map =new HashMap<Integer,Integer>();
        Integer j;
        for(int i=0;i<nums.length;i++){
            j = map.get(target-nums[i]);
            if(j!=null)
            {
                int[] answers = {j,i};
                return answers;
                
            }
            map.put(nums[i],i);
        }
        return null;
       
       
    }
2、add_two_nums
	linkedList
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            int val=0;
		    ListNode head=null,now=null;
            while(true){        	
            	if(l1!=null){
            		val = val+l1.val;
            		l1=l1.next;
            	}
        	    if(l2!=null){
        		    val = val+l2.val;
        		    l2=l2.next;
        	    }   
        	    if(l1==null&&l2==null&&val==0) break;
        	    else {
				    if(head==null){
					    head=new ListNode(val%10);
					    now = head;					
				    }else{
					    now.next=new ListNode(val%10);
					    now = now.next;
				    }
				    val = val/10;
        	    }
            }
            if(head==null) return new ListNode(0);
            else return head;
        }

3.longest subString
 public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer> map = new HashMap<Character,Integer>();
        Integer exist; Character c; int l=0,r=0,length = 0,nowLength = 0;
        while(r<s.length()){
            c  = s.charAt(r);
            exist = map.get(c);
            if(exist==null){
              nowLength++;
              length = nowLength>length?nowLength:length;
            } 
            else{
                for(int j=l;j<=exist;j++){
                    map.remove(s.charAt(j));
                }
                l = exist+1;
                nowLength = r-l+1;

            }
            map.put(c,r);
            r++;

        }
        return length;
        
    }

    4、Median of Two Sorted Arrays
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
     	int len1 = nums1.length;
     	int len2 = nums2.length;
     	if(len1>len2) return findMedianSortedArrays(nums2,nums1);
     	if(len1==0) return (nums2[len2/2]+nums2[(len2-1)/2])/2;
     	int i=0,j=0;     	
     	int len = (len1+len2)/2;
     	int l=-1,r=len1-1;
     	while(true){
     	    	i = (l+r)/2-1;
     		    j = len-i-1;
     		    if(i>-1&&nums1[i]>nums2[j]) {
         			r = i;
         		}else if (i+1<len1&&j>0&&nums2[j-1]>nums1[i+1]){
     	    		l = i;
     		    }else break;
        }
        	
        int max1;
        if(i>-1) max1 = nums1[i]; else max1 = nums2[j-1];
     	if(j>0&&nums2[j-1]>max1) max1 = nums2[j-1];
     	int min2;
     	if(j<len2) min2 = nums2[j]; else min2 = nums1[i+1];
     	if(i+1<len1&&nums1[i+1]<min2) min2 = nums1[i+1];
     	if((len1+len2)%2==0) return (max1+min2+0.0)/2;
     	else return min2;
    }

    思路：DP.....是不需要的
    5. Longest Palindromic Substring
	public String longestPalindrome(String s) {
        int length = s.length();
        if(length<=1) return s;
        int l=0,r=0,now=0,max=1;
        int sl=0,sr=0;
        int i=0;
        while(i<length){
            l=i;r=i;
            while(l>-1&&s.charAt(l)==s.charAt(i)){l--;}
            while(r<length&&s.charAt(r)==s.charAt(i)){r++;}
            i = r;
            while(l>-1&&r<length&&s.charAt(l)==s.charAt(r)){l--;r++;}
            now = r-l-1;
            if(now>max){sl=l+1;sr=r-1;max=now;}
        }
        return s.substring(sl,sr+1);
    }

    6.不清楚题目到底什么意思。。不过应该EZ
    7.EZ注意边界即可